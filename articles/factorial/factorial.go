package factorial // OMIT

import "math/big" // OMIT

var fstrings = []string{
	/*   0 */ "1",
	/*   1 */ "1",
	/*   2 */ "2",
	/*   3 */ "6",
	/*   4 */ "24",
	/*   5 */ "120",
	/* ... */
	/* 255 */ "3350850684932979117652665123754814942022584063591740702576779884286208799035732771005626138126763314259280802118502282445926550135522251856727692533193070412811083330325659322041700029792166250734253390513754466045711240338462701034020262992581378423147276636643647155396305352541105541439434840109915068285430675068591638581980604162940383356586739198268782104924614076605793562865241982176207428620969776803149467431386807972438247689158656000000000000000000000000000000000000000000000000000000000000000",
}

var f []*big.Int

func init() {
	f = make([]*big.Int, len(fstrings), len(fstrings))
	for i := range fstrings {
		f[i], _ = new(big.Int).SetString(fstrings[i], 10)
	}
}

// N returns n! if it is within 0..255, nil otherwise.
func N(n int) *big.Int {
	if n < 0 || n > len(f) {
		return nil
	}
	return f[n]
}

// OMIT

Table of big.Ints as Factorial Function
17 Oct 2014
Tags: math tables algorithms

Peter Vypov

* Tables of ints

You use a factorial function very occasionally, because there are not many
practical algorithms that employ it, and if they do the _n_ number is always small
— below 30. So, use a table to implement a factorial is natural.

However, using integers for holding a result is not very useful since the maximum
_n_ for 32 bit int or uint32 that can hold it would be _12_, and for uint64
— _20_. Not big difference.

* math/big package

Go has a [[http://godoc.org/math/big][math/big]] package which implements operations
on arbitrarily long integers.. It is very convenient using it to convert
big ints to and from strings:

.play factorial/tostring.go /^func main/,/^}/

Which makes it very suitable for table generation. The second parameter for
a [[http://godoc.org/math/big#Int.SetString][SetString()]] function, is a base;
0 or 10 mean base-10 numbers.

The table of strings is generated by a throw-away script (and which doesn't
have to be in Go)

.code factorial/generate.go /^const/,/^}$/

which calculates the factorials up to 255:

.code factorial/factorial.go /^var fstrings/,/^}/

The table of factorials up to 255 weighs about 64K. This table could then be
used in a module as a static variable, or converted at startup to a slice of
_big.Int_ and provided as a function, which I like better:

.code factorial/factorial.go /^func init/,/OMIT$/

* The correct way

The correct and practical way to do it in Go, though, would not be using a table,
but rather a _math/big_ package's [[http://godoc.org/math/big#Int.MulRange][MulRange]]
function. It multiplies all the integers within a certain range:

.play factorial/mulrange.go /^func main/,/^}$/

There you have it. A _5!_ in one line. The table approach is more fascinating,
though.

Apart from MulRange, [[http://godoc.org/math/big][math/big]] package has some
other useful functions that are not present in the
[[http://godoc.org/math][math]] package: [[http://godoc.org/math/big#Int.GCD][GCD]],
[[http://godoc.org/math/big#Int.ProbablyPrime][ProbablyPrime]], to name a few.
